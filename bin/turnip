#!/usr/bin/env python
"""
Turnip task management. Tastier than celery.

Commands:

    run
        Process tasks forever.

    prune
        Delete old tasks with states 'complete' or 'error'.

    revive
        Set 'started' tasks to 'pending'.

    rebuild [FN]
        Delete 'pending' tasks (and run FN if given).

    list
        List tasks.
"""
import sqlalchemy
import sys
import os

import logging
log = logging.getLogger('turnip')

from optparse import OptionParser, OptionGroup

from turnip.worker import Worker
from turnip import commands
from turnip import model

def main():
    usage="%prog --engine=ENGINE COMMAND [ARGS ...]\n" + __doc__

    # FIXME: Use argparse someday
    parser = OptionParser(usage)
    parser.add_option("--verbose", "-v", dest="verbose", action="count", help="Enable verbose output. Use twice to enable debug output.")
    parser.add_option("--engine", "-e", dest="engine", metavar="ENGINE", help="Database engine to use where tasks are stored (default: TURNIP_ENGINE environment variable)")

    options, args = parser.parse_args()

    if not args:
        parser.error("Must specify a command.")

    command = args[0].lower()

    if options.verbose > 1:
        log.setLevel(logging.DEBUG)
    elif options.verbose > 0:
        log.setLevel(logging.INFO)

    fn = getattr(commands, command)
    if not fn:
        parser.error("Invalid command: %s" % command)

    if not options.engine:
        options.engine = os.environ.get('TURNIP_ENGINE')

    if not options.engine:
        parser.error("Must specify engine using the --engine argument or TURNIP_ENGINE environment variable.")

    engine = sqlalchemy.create_engine(options.engine)
    model.init_model(engine)
    model.metadata.create_all(bind=engine)

    params = {}
    if command == 'rebuild':
        params['method'] = args[1]

    w = Worker()
    fn(w, **params)


if __name__ == '__main__':
    log_handler = logging.StreamHandler()
    log_handler.setFormatter(logging.Formatter('%(levelname)-8s %(message)s'))
    log.addHandler(log_handler)

    main()
